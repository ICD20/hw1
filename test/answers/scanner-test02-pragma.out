1: // This test program includes many errors.
2: // Check if your compiler can catch all the errors and the quality of the error messages.
3: // 20142021
4: 
5: PROGRAM foo(input, output, error) ;
6:    // variable declaraions
7:    var a, b, c: integer;
8:    var d, e: array [ 1 .. 10 ] of integer; 
9:    var g, h: real;
10:    var k: array [ 23 .. 57 ] of array [ 23 .. 57 ] of real; 
11:    var a: array [ 23 .. 57 ] of array [ 23 .. 57 ] of real;  // WRONG 1: redefined variables
12: 
13: 
14:    // procedure and function declarations
15:    procedure sort(a: array [ 1 .. 10 ] of integer);
16:       var a, b, c: integer; // duplicated declaration
17:       begin
18:         e := a + d        // WRONG 2: a is an int variable while d is an array.
19: 	a := qqq - rrr;   // WRONG 3: qqq and rrr are undefined variables
20:         d := f(k, e);     // WRONG 4: f is undefined function
21:       end;
22: 
23: 
24:    function  addition(a, b: integer) : integer;
25:       var c: integer;  // local declaration
26:       begin
27:          addition := a + b   // this is the return value
28:       end;
29: 
30: 
31:    function  addition(c, d: integer) : integer;
32:    // WRONG 5: redefine a function, even though the arguments have different names
33:       var e: integer;  // local declaration
34:       begin
35:          addition := c + d   // this is the return value
36:       end;
37: 
38: 
39:    function  addition(a, b: real) : real;
40:    // WARNING 6: Does you compiler allow over-loading? 
41:       var c: integer;  // local declaration
42:       begin
43:          addition := a + b   // this is the return value
44:       end;
45: 
46: 
47:    begin
48:       a := 1;
49:       while a < 10 do
50:       begin
51:          sum := sum + a;
52:          a   := a + 1 
53:       end;
54:       begin  // nested compound statement
55:          b := 1;
56:          while b < 11 do
57:          begin  // array initialization
58:             d[b] := b + b * (b - 1);
59:             b := b +1
60:          end;
61:          sort(d)   // a procedure call          
62:       end;
63:       k[25][26] := 3;        // wrong element type
64:       k[25][26] := 3.14;     // good
65:       k[25][26] := k[25][26] + 3;     // good
66:       k[25][126]  := 3.14;   // index out of bound
67:       k[125][26]  := 3.14;   // index out of bound
68:       k[125][126] := 3.14    // index out of bound
69:       a := extf(20, sum);    // WARNING 7: can your compiler handle external functions?
70: 
71: 
72: 
73:       // Warning 8: Can you compiler handle #include
74:    #include <abc.h>     // include
75:       a = bbb(20, sum);
76: 
77: 
78: 
79:        // Warning 9: How do your compiler handle conditional compilation?
80:  
81:       #if !defined(__unix__)
82:       #include Long40.h¡¨
83:        k[25][26] := k[25][26] + 5;     // good
84:       #elif defined(_TMS320C6200)
85:       #define assert(a)
86:        k[25][26] := k[25][26] + 333;     // good
87:       #else
88:       #include ¡¨Long40.h¡¨
89:        k[25][26] := k[25][26] + 6666;     // good
90:       #include <assert.h>
91:       #endif
92: 
93: 
94: 
95: 
96:        // Warning 9: How do your compiler handle pragma?
97:        #pragma    __promise((k % 16) == 0);
98:        b := 1;
99:        while b <= k do
100:        begin
101:          sum := sum + a[b];
102:          b   := b + 1 
103:        end;
104: 
105: 
106:    end.   // this is the end of the program
